package lesson_08;

public class MassiveUtilits {
    /**
     * --Методы--
     * Название класса (файла) должно четко отвечать на вопрос какие в нем собраны методы. Методы лучше разбивать по
     * смыслам на разные классы (файлы), не должны быть все методы собраны в одном классе;
     * <p>
     * --Формула создания метода--
     * 1 - модификатор доступа - это одно из 4-х видов слов, указывается перед методом или классом:
     * *     public - метод/класс будет доступен внутри всех пакетов всего проекта (99% случаев используется);
     * *     protected - внутри пакета и его наследникам, то есть дочерним классам,
     *                   расположенных в других пакетах в данном проекте;
     * *     ______ - будет доступен только внутри текущего пакета (текущей папки);
     * *     private - только внутри текущего класса (файла);
     * <p>
     * 2 - Статичность - два варианта: может быть указан признак статичности, либо нет:
     * *     ______ - не static, если метод будет вызываться у переменной text.split(" ");
     * *     static - если метод будет вызываться у типа (класса) String.copyValueOf(char[] data),
     * но у переменной его вызвать нельзя;
     * <p>
     * 3 - Возвращаемый тип или слово void если метод ни чего не возвращает:
     * *     public static int - если метод будет возвращать число;
     * *     public static char[] - если возвращает массив символов;
     * *     public static String - если возвращает строку;
     * *     public static ****** - прочие варианты возвращаемых типов;
     * *     public static void - если ни чего не возвращает, а просто выполняется, например, печать на консоль;
     * <p>
     * 4 - Название метода: поясняющее его суть, с маленькой буквы;
     * <p>
     * 5 - Входящие параметры в круглых скобках один или много через запятую с указанием типа
     * <p>
     * 6 - тело метода (то что должно происходить, когда метод вызовут);
     * <p>
     * public static void        printMassiveToConsole(int[][] mass)
     * Модификаторы доступа метода        Сигнатура метода
     */



    // Метод 1. Печать на консоль двумерного массива целых чисел
    public static void printMassiveToConsole(int[][] mass) {
        for (int i = 0; i < mass.length; i++) {
            for (int j = 0; j < mass[i].length; j++) {
                System.out.print(mass[i][j] + " ");

            }

            System.out.println();
        }

    }

    // Метод 2. Подсчет количества четных чисел в двумерном массиве целых чисел
    public static int countEvenNumbers(int[][] mass) {
        int count = 0;
        for (int i = 0; i < mass.length; i++) {
            for (int j = 0; j < mass[i].length; j++) {
                if (mass[i][j] % 2 == 0) {
                    count++;
                }
            }

        }
        return count;

    }

    // Метод 3. Создание массива гласных из строк текста
    public static char[] charGlassFromMassive(String str3) {
        int countGlass = 0; //количество гласных
        for (char ch : str3.toCharArray()) {//преобразуем стринги в массив символов,
            // из которых в результате прохода буквы будут премещяться в переменную ch
            if (ch == 'a' || ch == 'e' || ch == 'y' || ch == 'u' || ch == 'o' || ch == 'i' ||
                    ch == 'A' || ch == 'E' || ch == 'Y' || ch == 'U' || ch == 'O' || ch == 'I') {
                countGlass++;
            }
        }
        char[] glassChar = new char[countGlass]; //создаем массив гласных
        int currentIndex = 0;
        for (char ch : str3.toCharArray()) {//преобразуем стринги в массив символов,
            // из которых в результате прохода буквы будут премещяться в переменную ch
            if (ch == 'a' || ch == 'e' || ch == 'y' || ch == 'u' || ch == 'o' || ch == 'i' ||
                    ch == 'A' || ch == 'E' || ch == 'Y' || ch == 'U' || ch == 'O' || ch == 'I') {

                glassChar[currentIndex] = ch;//наполняем в массив символы
                currentIndex++;
            }
        }
        return glassChar;
    }
}
