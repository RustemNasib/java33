package lesson_03;

public class JavaOperands {
    public static void main(String[] args) {


        /**Математические операторы:
         "+", "-", "/", "*",
         "++" инкремент (увеличение на 1), х++ постфиксная форма, ++х префиксная форма,
         "--" декремент (уменьшает на 1), х-- постфиксная форма, --х префиксная форма,
         "%" остаток целочисленного деления или деление по модулю,

         Арифметические операции с присваиванием:
         += 	Сложение с присваиванием
         -=     Вычитание с присваиванием
         *=     Умножение с присваиванием
         /=     Деление с присваиванием
         %=     Деление по модулю с присваиванием
         **/

        /**Операторы сравнения:

         "==" равно,
         "!=" не равно,
         ">" больше,
         "<" меньше,
         ">=" больше или равно,
         "<=" меньше или равно,
         **/

        /**Логические операторы:
         "&&" условный И,
         "||" условный ИЛИ,

         &  Логическая операция И (AND) или конъюнкция.
         AND (&) - результат будет true, только если и A, и B равны true.
         Пример: для того чтобы свадьба состоялась, и невеста (A) и жених (B) должны явиться на бракосочетание,
         иначе оно не состоится.

         |  Логическая операция ИЛИ (OR) или дизъюнкция.
         OR (|) - результат будет true, если хотя бы одно значение равно true. Пример: для того, чтобы забрать
         ребенка из садика, должна прийти либо мать, либо отец, либо оба - в любом случае результат будет
         положительный. Если же никто не придет, ребенка не заберут - результат будет отрицательный.

         ^  Логическая операция исключающее ИЛИ (XOR).
         XOR (^) - результат будет true, только если или A равно true, или В равно true. Пример: у двух друзей на
         двоих один велосипед, поездка на велосипеде состоится только если один из них поедет на нем. Вдвоем они
         ехать не могут.

         !  Логическая унарная операция НЕ (NOT).
         NOT (!) - инвертирование значения. Если значение было true, то станет false, и наоборот.

         || Укороченная логическая операция ИЛИ (short-circuit)
         && Укороченная логическая операция И (short-circuit)

         &= Логическая операция И с присваиванием
         |= Логическая операция ИЛИ с присваиванием
         ^= Логическая операция исключающее ИЛИ с присваиванием
         **/

        /**Конструкция if
         if (Если первое условие ДА) {
         Тогда выполняется тело с кодом 1
         } else if (Если второе условие ДА) {
         Тогда выполняется тело с кодом 2
         } else {
         Во всех прочих условиях выполняется тело с кодом 3
         }
         **/

        /**Конструкция Switch
         switch(значение3){
         case значение1:
         Выполняющийся код;
         break; //остановка switch
         case значение2:
         Выполняющийся код;
         break; //остановка switch
         case значение3:
         Выполняющийся код;
         break; //остановка switch
         default:
         Выполняющийся код, если значение не верное;
         }
         **/

        System.out.println("1.Математические операторы");
        int result1 = (6 + 2 - 4) * 2 / 2;
        System.out.println("result1= " + result1);

        int result2 = 4 + 5 - 2 * 3;
        System.out.println("result2= " + result2);

        int result3 = 4 + (5 - 2) * 3;
        System.out.println("result3= " + result3);

        double result4 = -6; // Операция унарного вычиания изменяет знак своего единственного операнда
        double result5 = +6; // Операция унарного сложения просто возвращает значение своего операнда
        System.out.println("result4 = " + result4);
        System.out.println("result5 = " + result5);
        int result6 = 16 / 5; // Когда операция деления выполняется над целочисленным типом данных,
// ее результат не будет содержать дробю.Это деление без остака.
        System.out.println("result6 = " + result6);

        char result7 = 'n';
        System.out.println(result7);//dec 110 (имеет код 110)
        System.out.println(result7 + 1);// dec 111, но если "result7 = result 7 +1", n1
        System.out.println(result7 / 5);//22

        //2. Инкременты и декременты
        System.out.println("2.инкремент (+1) и декремент (-1)");
        int x = 9;
        // к 9 прибавляем 1
        // x++; или x = x+1 (тоже самое)
        ++x;
        System.out.println(x);

        int a = 1;
        int b = a++; // постфиксная форма, т.е. знаки сложения находятся после переменной
        int c = ++a; // префиксная форма, т.е. знаки сложения находятся перед переменной
        c++;

        System.out.println("a= " + a);//3
        System.out.println("b= " + b);//1
        System.out.println("c= " + c);//4

        // над  переменной типа char также можно проводить операцию инкремента и декремена.
        // Операции проводятся на кодом символа.
        // Символы в таблице unicode размещены по алфавиту, поэтому при выполнении операций с символьным значением
        // мы получаем следующий по алфавиту символ.
        char ch = 'x';
        System.out.println("ch содержит " + ch + "(" + (int) ch + ")");
        ch++; //увеличиваем ch
        System.out.println("новое значение ch: " + ch + "(" + (int) ch + ")");

        //3. "%" остаток целочисленного деления или деление по модулю
        int result8 = 13 % 2; // 16%2=0, 17%2=1
        System.out.println("result 8= " + result8);

        double result9 = 6.2 % 5.0; // 6.2 (5+1.2)/5=1.2
        System.out.println("result9= " + result9);

        // 4. Арифметические операции с присваиванием
        System.out.println("4. Арифметические операции с присваиванием");

        int num1 = 1;
        int num2 = 2;
        int num3 = 3;

        num1 += 3;//4 (num1 +3)
        num2 *= 2;//4
        num3 += num1 * num2;// 19 (num3 + num1*num2)
        System.out.println(num1);
        System.out.println(num2);
        System.out.println(num3);

        // 5. Операторы сравнения
        System.out.println(" Операторы сравнения");
        // можно сравнивать значения любых типов с помощью операций == и !=
        int num4 = 14;
        int num5 = 14;
        boolean result10 = (num4 == num5); // true
        System.out.println(num4 + "==" + num5 + "\nЭто: " + result10); // 14==14 это true

        int num6 = 14;
        double num7 = 14.1;
        boolean result11 = (num6 == num7);// false (если num7 = 14.0, тогда result11 будет true
        System.out.println(num6 + "==" + num7 + "Это: " + result11); //14==14.1 Это: false

        char ch1 = '@';
        char ch2 = 64;
        boolean result12 = (ch1 == ch2); //true
        System.out.println(ch1 + "==" + ch2 + "Это: " + result12); // @==@ это true

        boolean a1 = true;
        boolean b1 = false;
        boolean c1 = a1 | b1; //true ИЛИ
        boolean d1 = a1 & b1; // false И
        boolean e1 = a1 ^ b1; // true исключающее ИЛИ
        boolean f1 = (!a1 & b1) | (a1 & b1); // (false & false) | (true & true)
        boolean g1 = !a1; //false
        System.out.println("a1 = " + a1); // a1 = true
        System.out.println("b1 = " + b1); // b1 = false
        System.out.println("a1 | b1 = " + c1); // a1| b1 = true
        System.out.println("a1 & b1 = " + d1); //a1  &b1 = false
        System.out.println("a1^b1 = " + e1); // a1 ^b1 = true


    }

}
