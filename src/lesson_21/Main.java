package lesson_21;

public class Main {

        /*
         *  Интерфейс: Collection
         *  Коллекция - это массив с неограниченным размером и хранящий любые типы данных, но одного типа в одной коллекции
         *  До версии JDK 1.5 все коллекции были подчинены Object, и поэтому одна коллекция могла хранить разные типы
         *  данных, но не могла иметь разные методы свойственные типам и поэтому после от этого отказались и все коллекции
         *  стали содержать только один тип.
         *
         *       Интерфейсы коллекций: Collection и Map (находятся на одном уровне, т.е. друг с другом не связаны)
         *                             Collection - группы объектов;
         *                             Map - массив объектов по ассоциациям;
         *
         *                                      (Interface)
         *                                        Iterable (повторяемый или перебираемый) содержит Iterator<T> iterator();
         *                                           |
         *                                      (Interface)
         *               __________________java.util.Collection _________________________
         *              |                                                               |
         *          (Interface)                                                     (Interface)
         *      java.util.Set (Сумка)                                             java.util.List (Записная книжка)
         *      - Все значения уникальны;                                          - Могут хранится дубликаты значений;
         *      - Нет индексов;                                                    - Индексы есть;
         *      - Нет порядка вхождения;                                           - Есть порядок вхождения;
         *                  |                                                                        |
         *     _____________|_______________                                         ________________|___________________
         *     |                           |                                         |                                  |
         * (Interface)                HashSet                                   ArrayList                         LinkedList
         * SortedSet                - Элементы не упорядочены                 (ас.пронумерованный список)       (ас.живая очередь)
         *     |                    - Может хранить NULL – значения          - Добавление долго              - Добавление быстрое
         * (Interface)              - Порядок задает HashCode                - Удаление долго                - Удаление быстрое
         * NavigableSet                            |                         - Читать быстро                 - Читать дольше
         *     |                                   |                        ___________________              ___________________
         *     |                                   |                         - Добавление редкое;            - Добавление частое;
         *     |                                   |                         - Удаление редкое;              - Удаление частое;
         *     |                                   |                         - Чтение частое;                - Чтение условно редкое;
         *     |                                   |
         *  TreeSet                          LinkedHashSet
         * (дерево значений)                  - Есть порядок вхождения
         * (двоичное  дерево)
         * (не просто двоичное дерево)
         * (меньше на лево, больше на право)
         * (сортировка - компарабл метод компероту)
         */

        /*
         *  Интерфейс: Map
         *  Коллекция - это массив с неограниченным размером и хранящий любые типы данных, но одного типа в одной коллекции
         *  До версии JDK 1.5 все коллекции были подчинены Object, и поэтому одна коллекция могла хранить разные типы
         *  данных, но не могла иметь разные методы свойственные типам и поэтому после от этого отказались и все коллекции
         *  стали содержать только один тип.
         *


         *       Интерфейсы коллекций: Collection и Map (находятся на одном уровне, т.е. друг с другом не связаны)
         *                             Collection - группы объектов;
         *                             Map - массив объектов по ассоциациям, хранящий ключ и значения;
         *      Дубликаты по значению могут быть, а по ключу не могут быть. Ключ всегда уникальный.
         *
         *      Интерфейс: Map
         *          *          - Map - у интерфейса Map есть реализация HashMap<K, V>, его еще называют массив по ассоциациям
         *          *              K - Тип ключа (любой ссылочный тип)
         *          *              V - Тип значения (любой ссылочный тип)
         *          *              Пример турнирная таблица: | Динамо | Шахтер | Спартак | - это ключ вместо индексов (уникальный)
         *          *                                        |   5    |  4     |   3     | - это значение (не уникальные)
         *          *
         *          *              В данном примере тип ключа String, тип значения Integer, но типы могут быть любые.
         *          *
         *          *              Примитивные типы нельзя хранить внутри коллекций! Для этого есть ссылочные типы примитивов:
         *          *                  int    -  Integer
         *          *                  byte   -  Byte
         *          *                  short  -  Short
         *          *                  char   -  Character
         *          *       Пример коллекции типа HashMap standings - турнирная таблица, ниже:
         *
         *      Некоторые источники говорят о том что Map это не коллекция, а ассоциативный массив, где индексом
         *      выступает ключ - данные любого типа приведенные к int. Однако Герберт Шилдт Java полное руководство
         *      называет Map коллекциями.
         *      Примеры использования Map, там где есть список состоящий из пары значений, например:
         *          - ТурнирнаяТаблица<K-команда,V-очки>
         *          - Рецепты<K-ингредиент,V-количество>
         *          - ИгральныеКарты<K-карта,V-значение>
         *          - КаталогТоваров <K-карточка номенклатуры товара,V-розничная цена>
         *       При чем ключ не просто числовой идентификатор, он и так есть в виде индексов или хэшкодов, а именно
         *       полезный тип данных в ключе. Тогда например при сортировке по ключу, произойдет и сортировка по
         *       значению. Если такой задачи нет, тогда можно использовать не парные коллекции Set или List.
         *       Ключ принимает любой ссылочный тип, если нужны примитивы то классы обертки, и значение принимает
         *       любой тип, а так же можно положить целую коллекцию и связать с ключом.
         *
         *                                       (Interface)
         *                                        Iterable (повторяемый или перебираемый) содержит Iterator<T> iterator();
         *                                           |
         *                                      (Interface)
         *                    __________________java.util.Map <ключ, значение> _______________________
         *                   |                            |                                           |
         *             (Interface)                     HashMap                                      HashTable (Считается устаревшей)
         *              SortedMap                 - нет порядка вхождения
         *                  |                     - ключ может быть == Null,
         *             (Interface)                  но один раз.
         *            NavigableMap                - есть hashCode (меняется при расширении)
         *                   |                    - new HashMap<>(16,0.75f)
         *                TreeMap                 -
         *            - есть сортировка<K,V>
         *                                                 |
         *                                                 |
         *                                           LinkedHashMap
         *                                        - есть порядка вхождения
         *
                  */

}
